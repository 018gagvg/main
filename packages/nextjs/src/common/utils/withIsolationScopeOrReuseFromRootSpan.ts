import {
  getActiveSpan,
  getCapturedScopesOnSpan,
  getDefaultIsolationScope,
  getRootSpan,
  spanToJSON,
  withIsolationScope,
} from '@sentry/core';
import type { Scope } from '@sentry/types';

/**
 * Wrap a callback with a new isolation scope.
 * However, if we have an active root span that was generated by next, we want to reuse the isolation scope from that span.
 */
export function withIsolationScopeOrReuseFromRootSpan<T>(cb: (isolationScope: Scope) => T): T {
  const activeSpan = getActiveSpan();

  if (!activeSpan) {
    return withIsolationScope(cb);
  }

  const rootSpan = getRootSpan(activeSpan);

  // Verify this is a next span
  if (!spanToJSON(rootSpan).data?.['next.route']) {
    return withIsolationScope(cb);
  }

  const scopes = getCapturedScopesOnSpan(rootSpan);

  const isolationScope = scopes.isolationScope;

  // If this is the default isolation scope, we still want to fork one
  if (isolationScope === getDefaultIsolationScope()) {
    return withIsolationScope(cb);
  }

  return withIsolationScope(isolationScope, cb);
}
