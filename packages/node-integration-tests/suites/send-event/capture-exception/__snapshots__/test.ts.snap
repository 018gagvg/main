// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should send captureException 1`] = `
Object {
  "environment": "production",
  "event_id": Any<String>,
  "exception": Object {
    "values": Array [
      Object {
        "mechanism": Object {
          "handled": true,
          "synthetic": true,
          "type": "generic",
        },
        "stacktrace": Object {
          "frames": Array [
            Object {
              "colno": 75,
              "context_line": "            step((generator = generator.apply(thisArg, _arguments || [])).next());
",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/node_modules/tslib/tslib.js",
              "function": "undefined.<anonymous>",
              "in_app": false,
              "lineno": 115,
              "module": "tslib:tslib",
              "post_context": Array [
                "        });
",
                "    };
",
                "
",
                "    __generator = function (thisArg, body) {
",
                "        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
",
                "        return g = { next: verb(0), \\"throw\\": verb(1), \\"return\\": verb(2) }, typeof Symbol === \\"function\\" && (g[Symbol.iterator] = function()  {snip}",
                "        function verb(n) { return function (v) { return step([n, v]); }; }
",
              ],
              "pre_context": Array [
                "
",
                "    __awaiter = function (thisArg, _arguments, P, generator) {
",
                "        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
",
                "        return new (P || (P = Promise))(function (resolve, reject) {
",
                "            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
",
                "            function rejected(value) { try { step(generator[\\"throw\\"](value)); } catch (e) { reject(e); } }
",
                "            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
",
              ],
            },
            Object {
              "colno": 57,
              "context_line": "        function verb(n) { return function (v) { return step([n, v]); }; }
",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/node_modules/tslib/tslib.js",
              "function": "Object.next",
              "in_app": false,
              "lineno": 122,
              "module": "tslib:tslib",
              "post_context": Array [
                "        function step(op) {
",
                "            if (f) throw new TypeError(\\"Generator is already executing.\\");
",
                "            while (_) try {
",
                "                if (f = 1, y && (t = op[0] & 2 ? y[\\"return\\"] : op[0] ? y[\\"throw\\"] || ((t = y[\\"return\\"]) && t.call(y), 0) : y.next) && !(t =  {snip}",
                "                if (y = 0, t) op = [op[0] & 2, t.value];
",
                "                switch (op[0]) {
",
                "                    case 0: case 1: t = op; break;
",
              ],
              "pre_context": Array [
                "            step((generator = generator.apply(thisArg, _arguments || [])).next());
",
                "        });
",
                "    };
",
                "
",
                "    __generator = function (thisArg, body) {
",
                "        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
",
                "        return g = { next: verb(0), \\"throw\\": verb(1), \\"return\\": verb(2) }, typeof Symbol === \\"function\\" && (g[Symbol.iterator] = function()  {snip}",
              ],
            },
            Object {
              "colno": 27,
              "context_line": "                op = body.call(thisArg, _);
",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/node_modules/tslib/tslib.js",
              "function": "step",
              "in_app": false,
              "lineno": 141,
              "module": "tslib:tslib",
              "post_context": Array [
                "            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
",
                "            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
",
                "        }
",
                "    };
",
                "
",
                "    __createBinding = function(o, m, k, k2) {
",
                "        if (k2 === undefined) k2 = k;
",
              ],
              "pre_context": Array [
                "                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
",
                "                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
",
                "                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
",
                "                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
",
                "                        if (t[2]) _.ops.pop();
",
                "                        _.trys.pop(); continue;
",
                "                }
",
              ],
            },
            Object {
              "colno": 7,
              "context_line": "      require(\`\${testDir}/subject\`);",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/packages/node-integration-tests/utils/index.ts",
              "function": "Object.<anonymous>",
              "in_app": true,
              "lineno": 79,
              "module": "index.ts",
              "post_context": Array [
                "",
                "      setTimeout(() => server.close(), 500);",
                "    });",
                "",
                "    const server = app.listen(port, () => {",
                "      resolve();",
                "    });",
              ],
              "pre_context": Array [
                "",
                "  await new Promise(resolve => {",
                "    // eslint-disable-next-line @typescript-eslint/no-var-requires",
                "    const app = require(\`\${testDir}/server\`).default as Express;",
                "",
                "    app.get('/test', async () => {",
                "      require(\`\${testDir}/init\`);",
              ],
            },
            Object {
              "colno": 21,
              "context_line": "        return this.requireModule(from, moduleName);",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/node_modules/jest-runtime/build/index.js",
              "function": "Runtime.requireModuleOrMock",
              "in_app": false,
              "lineno": 598,
              "module": "jest-runtime.build:index",
              "post_context": Array [
                "      }",
                "    } catch (e) {",
                "      if (e.code === 'MODULE_NOT_FOUND') {",
                "        const appendedMessage = (0, _helpers.findSiblingsWithFileExtension)(",
                "          this._config.moduleFileExtensions,",
                "          from,",
                "          moduleName",
              ],
              "pre_context": Array [
                "  }",
                "",
                "  requireModuleOrMock(from, moduleName) {",
                "    try {",
                "      if (this._shouldMock(from, moduleName)) {",
                "        return this.requireMock(from, moduleName);",
                "      } else {",
              ],
            },
            Object {
              "colno": 10,
              "context_line": "    this._loadModule(",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/node_modules/jest-runtime/build/index.js",
              "function": "Runtime.requireModule",
              "in_app": false,
              "lineno": 433,
              "module": "jest-runtime.build:index",
              "post_context": Array [
                "      localModule,",
                "      from,",
                "      moduleName,",
                "      modulePath,",
                "      options,",
                "      moduleRegistry",
                "    );",
              ],
              "pre_context": Array [
                "      exports: {},",
                "      filename: modulePath,",
                "      id: modulePath,",
                "      loaded: false",
                "    };",
                "    moduleRegistry.set(modulePath, localModule);",
                "",
              ],
            },
            Object {
              "colno": 12,
              "context_line": "      this._execModule(localModule, options, moduleRegistry, fromPath);",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/node_modules/jest-runtime/build/index.js",
              "function": "Runtime._loadModule",
              "in_app": false,
              "lineno": 577,
              "module": "jest-runtime.build:index",
              "post_context": Array [
                "    }",
                "",
                "    localModule.loaded = true;",
                "  }",
                "",
                "  _getFullTransformationOptions(options) {",
                "    return _objectSpread({}, options, {",
              ],
              "pre_context": Array [
                "      );",
                "    } else if (_path().default.extname(modulePath) === '.node') {",
                "      localModule.exports = require(modulePath);",
                "    } else {",
                "      // Only include the fromPath if a moduleName is given. Else treat as root.",
                "      const fromPath = moduleName ? from : null;",
                "",
              ],
            },
            Object {
              "colno": 68,
              "context_line": "    runScript[_transform().ScriptTransformer.EVAL_RESULT_VARIABLE].call(",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/node_modules/jest-runtime/build/index.js",
              "function": "Runtime._execModule",
              "in_app": false,
              "lineno": 867,
              "module": "jest-runtime.build:index",
              "post_context": Array [
                "      localModule.exports,",
                "      localModule, // module object",
                "      localModule.exports, // module exports",
                "      localModule.require, // require implementation",
                "      dirname, // __dirname",
                "      filename, // __filename",
                "      this._environment.global, // global object",
              ],
              "pre_context": Array [
                "        'You are trying to \`import\` a file after the Jest environment has been torn down.'",
                "      );",
                "",
                "      process.exitCode = 1;",
                "      return;",
                "    } //Wrapper",
                "",
              ],
            },
            Object {
              "colno": 8,
              "context_line": "Sentry.captureException('Error');",
              "filename": "/Users/onurtemizkan/Projects/sentry-javascript/packages/node-integration-tests/suites/send-event/capture-exception/subject.ts",
              "function": "Object.<anonymous>",
              "in_app": true,
              "lineno": 3,
              "module": "subject.ts",
              "post_context": Array [
                "",
              ],
              "pre_context": Array [
                "import * as Sentry from '@sentry/node';",
                "",
              ],
            },
          ],
        },
        "type": "Error",
        "value": "Error",
      },
    ],
  },
  "extra": Object {
    "normalizeDepth": 3,
  },
  "platform": "node",
  "sdk": Object {
    "integrations": Array [
      "InboundFilters",
      "FunctionToString",
      "ContextLines",
      "Console",
      "Http",
      "OnUncaughtException",
      "OnUnhandledRejection",
      "LinkedErrors",
    ],
    "name": "sentry.javascript.node",
    "packages": Array [
      Object {
        "name": "npm:@sentry/node",
        "version": "6.18.1",
      },
    ],
    "version": "6.18.1",
  },
  "tags": Object {
    "skippedNormalization": true,
  },
  "timestamp": Any<Number>,
}
`;
