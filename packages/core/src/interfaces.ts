import { Event, EventHint, Severity, Transport } from '@sentry/types';
import { SyncPromise } from '@sentry/utils/syncpromise';

/**
 * Internal platform-dependent Sentry SDK Backend.
 *
 * While {@link Client} contains business logic specific to an SDK, the
 * Backend offers platform specific implementations for low-level operations.
 * These are persisting and loading information, sending events, and hooking
 * into the environment.
 *
 * Backends receive a handle to the Client in their constructor. When a
 * Backend automatically generates events, it must pass them to
 * the Client for validation and processing first.
 *
 * Usually, the Client will be of corresponding type, e.g. NodeBackend
 * receives NodeClient. However, higher-level SDKs can choose to instanciate
 * multiple Backends and delegate tasks between them. In this case, an event
 * generated by one backend might very well be sent by another one.
 *
 * The client also provides access to options via {@link Client.getOptions}.
 */
export interface Backend {
  /** Creates a {@link Event} from an exception. */
  eventFromException(exception: any, hint?: EventHint): SyncPromise<Event>;

  /** Creates a {@link Event} from a plain message. */
  eventFromMessage(message: string, level?: Severity, hint?: EventHint): SyncPromise<Event>;

  /** Submits the event to Sentry */
  sendEvent(event: Event): void;

  /**
   * Returns the transport that is used by the backend.
   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.
   *
   * @returns The transport.
   */
  getTransport(): Transport;
}
