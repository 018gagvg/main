import { Scope } from '@sentry/hub';
import { Breadcrumb, Event, EventHint, Severity, Transport } from '@sentry/types';
import { SyncPromise } from '@sentry/utils/syncpromise';

/**
 * Internal platform-dependent Sentry SDK Backend.
 *
 * While {@link Client} contains business logic specific to an SDK, the
 * Backend offers platform specific implementations for low-level operations.
 * These are persisting and loading information, sending events, and hooking
 * into the environment.
 *
 * Backends receive a handle to the Client in their constructor. When a
 * Backend automatically generates events or breadcrumbs, it must pass them to
 * the Client for validation and processing first.
 *
 * Usually, the Client will be of corresponding type, e.g. NodeBackend
 * receives NodeClient. However, higher-level SDKs can choose to instanciate
 * multiple Backends and delegate tasks between them. In this case, an event
 * generated by one backend might very well be sent by another one.
 *
 * The client also provides access to options via {@link Client.getOptions}
 * and context via {@link Client.getContext}. Note that the user might update
 * these any time and they should not be cached.
 */
export interface Backend {
  /** Creates a {@link Event} from an exception. */
  eventFromException(exception: any, hint?: EventHint): SyncPromise<Event>;

  /** Creates a {@link Event} from a plain message. */
  eventFromMessage(message: string, level?: Severity, hint?: EventHint): SyncPromise<Event>;

  /** Submits the event to Sentry */
  sendEvent(event: Event): void;

  /**
   * Receives a breadcrumb and stores it in a platform-dependent way.
   *
   * This function is invoked by the client before merging the breadcrumb into
   * the scope. Return `false` to prevent this breadcrumb from being merged.
   * This should be done for custom breadcrumb management in the backend.
   *
   * In most cases, this method does not have to perform any action and can
   * simply return `true`. It can either be synchronous or asynchronous.
   *
   * @param breadcrumb The breadcrumb to store.
   * @returns True if the breadcrumb should be merged by the client.
   */
  storeBreadcrumb(breadcrumb: Breadcrumb): boolean;

  /**
   * Receives the whole scope and stores it in a platform-dependent way.
   *
   * This function is invoked by the scope after the scope is configured.
   * This should be done for custom context management in the backend.
   *
   * @param scope The scope to store.
   */
  storeScope(scope: Scope): void;

  /**
   * Returns the transport that is used by the backend.
   * Please note that the transport gets lazy initialized so it will only be there once the first event has been sent.
   *
   * @returns The transport.
   */
  getTransport(): Transport;
}
