/* eslint-disable no-console */

// This script changes the file structure inside the `build` directory so that
// the final structure is a) compatible with the Angular package format and
// b) as similar as possible to our other SDKs. In order to achieve b), this
// script moves the type declaration files (+maps) from `build` to `build/types`
// and modifies the entry points in the generated package.json accordingly.

// This script needs to be executed after compiling because our package.json
// (i.e. the one that we maintain and that serves as a basis for ng-packagr)
// also has to point to `build/types`.

import * as fs from 'fs';
import * as path from 'path';

const BUILD_DIR = 'build';
const TYPES_DIR = 'types';

/**
 * Moves all type declaration files (*.d.ts, *.d.ts.map) to `build/types` to conform with
 * our other SDK's structure.
 */
function moveTypeDeclarations(): void {
  try {
    const buildDir = path.resolve(BUILD_DIR);
    const typesDir = path.resolve(BUILD_DIR, TYPES_DIR);

    if (!fs.existsSync(typesDir)) {
      fs.mkdirSync(typesDir);
    }

    const declarationFiles = fs
      .readdirSync(buildDir)
      .filter(file => file.endsWith('.d.ts') || file.endsWith('.d.ts.map'));

    declarationFiles.forEach(f => fs.renameSync(path.resolve(buildDir, f), path.resolve(typesDir, f)));
  } catch (error) {
    console.error('Error while moving type declaration files');
    process.exit(-1);
  }
}

/**
 * Takes the package.json file that is generated by `ng-packagr` when running `yarn build`
 * and modifies the type entry points to point to the `build/types` directory.
 * Additionally, this function deletes unnecessary properties that do not need to be
 * shipped with the NPM package.
 */
function modifyPkgJson(): void {
  const typeEntryPoints = ['types', 'typings'];
  const typeEntryFile = 'sentry-angular.d.ts';

  try {
    // this is the path to the package.json that is generated by ng-packagr
    const packageJsonPath = path.resolve(BUILD_DIR, 'package.json');
    const pkgJson: { [key: string]: unknown } = JSON.parse(fs.readFileSync(packageJsonPath, { encoding: 'utf8' }));

    const newPkgJson = { ...pkgJson };

    typeEntryPoints.forEach(entryPoint => {
      newPkgJson[entryPoint] = path.join(TYPES_DIR, typeEntryFile);
    });

    // We do not need volta information in the shipped package.json
    delete newPkgJson.volta;

    fs.writeFileSync(packageJsonPath, JSON.stringify(newPkgJson, null, 2));
  } catch (error) {
    console.error('Error while modifying generated package.json');
    process.exit(-1);
  }
}

function postbuild(): void {
  moveTypeDeclarations();
  modifyPkgJson();
  console.log('\nSuccessfully finished postbuild commands for @sentry/angular\n');
}

postbuild();
