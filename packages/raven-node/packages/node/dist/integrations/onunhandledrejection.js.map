{"version":3,"file":"onunhandledrejection.js","sourceRoot":"","sources":["../../src/integrations/onunhandledrejection.ts"],"names":[],"mappings":";;AAAA,qCAA2E;AAG3E,uCAAuC;AACvC;IAAA;QACE;;WAEG;QACI,SAAI,GAAW,sBAAsB,CAAC;IA6B/C,CAAC;IA5BC;;OAEG;IACI,sCAAO,GAAd;QACE,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,UAAC,MAAM,EAAE,OAAiB;YAAjB,wBAAA,EAAA,YAAiB;YAChE,IAAM,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;YACvE,gBAAS,CAAC;gBACR,qBAAc,CAAC,UAAA,KAAK;oBAClB,2DAA2D;oBAC3D,IAAI,OAAO,CAAC,IAAI,EAAE;wBAChB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBAC7B;oBACD,IAAI,OAAO,CAAC,IAAI,EAAE;wBAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;4BACnC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;wBACvC,CAAC,CAAC,CAAC;qBACJ;oBACD,IAAI,OAAO,CAAC,KAAK,EAAE;wBACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;4BACpC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;wBAC1C,CAAC,CAAC,CAAC;qBACJ;oBACD,KAAK,CAAC,QAAQ,CAAC,2BAA2B,EAAE,IAAI,CAAC,CAAC;gBACpD,CAAC,CAAC,CAAC;gBACH,uBAAgB,CAAC,MAAM,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACH,2BAAC;AAAD,CAAC,AAjCD,IAiCC;AAjCY,oDAAoB","sourcesContent":["import { captureException, configureScope, withScope } from '@sentry/shim';\nimport { Integration } from '@sentry/types';\n\n/** Global Promise Rejection handler */\nexport class OnUnhandledRejection implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = 'OnUnhandledRejection';\n  /**\n   * @inheritDoc\n   */\n  public install(): void {\n    global.process.on('unhandledRejection', (reason, promise: any = {}) => {\n      const context = (promise.domain && promise.domain.sentryContext) || {};\n      withScope(() => {\n        configureScope(scope => {\n          // Preserve backwards compatibility with raven-node for now\n          if (context.user) {\n            scope.setUser(context.user);\n          }\n          if (context.tags) {\n            Object.keys(context.tags).forEach(key => {\n              scope.setTag(key, context.tags[key]);\n            });\n          }\n          if (context.extra) {\n            Object.keys(context.extra).forEach(key => {\n              scope.setExtra(key, context.extra[key]);\n            });\n          }\n          scope.setExtra('unhandledPromiseRejection', true);\n        });\n        captureException(reason);\n      });\n    });\n  }\n}\n"]}