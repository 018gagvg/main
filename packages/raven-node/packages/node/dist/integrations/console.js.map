{"version":3,"file":"console.js","sourceRoot":"","sources":["../../src/integrations/console.ts"],"names":[],"mappings":";;AAAA,qCAA6C;AAC7C,uCAAsD;AACtD,uCAAqC;AACrC,6BAA8B;AAE9B;;GAEG;AACH,qBAAqB,YAAiB;IACpC,sEAAsE;IACtE,oEAAoE;IACpE,2BAA2B;IAC3B,OAAO,UAAS,YAAuB;QACrC,OAAO,UAAS,QAAgB;YAC9B,IAAM,cAAc,GAAG,YAAY,CAAC,KAAK,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;YAEnE,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,OAAO,cAAc,CAAC;aACvB;YAED,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,OAAO,CAC/C,cAAc,CAAC,cAAc,CAAC,CAC/B,CAAC;YAEF,OAAO,cAAc,CAAC;QACxB,CAAC,CAAC;IACJ,CAAC,CAAC;AACJ,CAAC;AAED;;GAEG;AACH,wBAAwB,cAAmB;IACzC,OAAO,UAAS,KAAa;QAC3B,IAAI,CAAC,CAAC,KAAK,IAAI,cAAc,CAAC,EAAE;YAC9B,OAAO;SACR;QAED,YAAI,CAAC,cAAc,EAAE,KAAK,EAAE,UAAS,oBAA+B;YAClE,IAAI,WAAqB,CAAC;YAE1B,QAAQ,KAAK,EAAE;gBACb,KAAK,OAAO;oBACV,WAAW,GAAG,gBAAQ,CAAC,KAAK,CAAC;oBAC7B,MAAM;gBACR,KAAK,OAAO;oBACV,WAAW,GAAG,gBAAQ,CAAC,KAAK,CAAC;oBAC7B,MAAM;gBACR,KAAK,MAAM;oBACT,WAAW,GAAG,gBAAQ,CAAC,IAAI,CAAC;oBAC5B,MAAM;gBACR,KAAK,MAAM;oBACT,WAAW,GAAG,gBAAQ,CAAC,OAAO,CAAC;oBAC/B,MAAM;gBACR;oBACE,WAAW,GAAG,gBAAQ,CAAC,GAAG,CAAC;aAC9B;YAED,OAAO;gBACL,oBAAa,CAAC;oBACZ,QAAQ,EAAE,SAAS;oBACnB,KAAK,EAAE,WAAW;oBAClB,OAAO,EAAE,aAAM,CAAC,KAAK,CAAC,SAAS,EAAE,SAAS,CAAC;iBAC5C,CAAC,CAAC;gBAEH,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;YACxD,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC;AAED,iCAAiC;AACjC;IAAA;QACE;;WAEG;QACI,SAAI,GAAW,SAAS,CAAC;IAUlC,CAAC;IATC;;OAEG;IACI,yBAAO,GAAd;QACE,IAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;QACvC,YAAI,CAAC,YAAY,EAAE,OAAO,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC;QACvD,8FAA8F;QAC9F,OAAO,CAAC,SAAS,CAAC,CAAC;IACrB,CAAC;IACH,cAAC;AAAD,CAAC,AAdD,IAcC;AAdY,0BAAO","sourcesContent":["import { addBreadcrumb } from '@sentry/shim';\nimport { Integration, Severity } from '@sentry/types';\nimport { fill } from '@sentry/utils';\nimport { format } from 'util';\n\n/**\n * Wrapper function for internal _load calls within `require`\n */\nfunction loadWrapper(nativeModule: any): any {\n  // We need to use some functional-style currying to pass values around\n  // as we cannot rely on `bind`, because this has to preserve correct\n  // context for native calls\n  return function(originalLoad: () => any): any {\n    return function(moduleId: string): any {\n      const originalModule = originalLoad.apply(nativeModule, arguments);\n\n      if (moduleId !== 'console') {\n        return originalModule;\n      }\n\n      ['debug', 'info', 'warn', 'error', 'log'].forEach(\n        consoleWrapper(originalModule),\n      );\n\n      return originalModule;\n    };\n  };\n}\n\n/**\n * Wrapper function that'll be used for every console level\n */\nfunction consoleWrapper(originalModule: any): any {\n  return function(level: string): any {\n    if (!(level in originalModule)) {\n      return;\n    }\n\n    fill(originalModule, level, function(originalConsoleLevel: () => any): any {\n      let sentryLevel: Severity;\n\n      switch (level) {\n        case 'debug':\n          sentryLevel = Severity.Debug;\n          break;\n        case 'error':\n          sentryLevel = Severity.Error;\n          break;\n        case 'info':\n          sentryLevel = Severity.Info;\n          break;\n        case 'warn':\n          sentryLevel = Severity.Warning;\n          break;\n        default:\n          sentryLevel = Severity.Log;\n      }\n\n      return function(): any {\n        addBreadcrumb({\n          category: 'console',\n          level: sentryLevel,\n          message: format.apply(undefined, arguments),\n        });\n\n        originalConsoleLevel.apply(originalModule, arguments);\n      };\n    });\n  };\n}\n\n/** Console module integration */\nexport class Console implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = 'Console';\n  /**\n   * @inheritDoc\n   */\n  public install(): void {\n    const nativeModule = require('module');\n    fill(nativeModule, '_load', loadWrapper(nativeModule));\n    // special case: since console is built-in and app-level code won't require() it, do that here\n    require('console');\n  }\n}\n"]}