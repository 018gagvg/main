{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../src/sdk.ts"],"names":[],"mappings":";;AAAA,qCAA2C;AAC3C,qCAAwE;AAExE,mCAAsC;AACtC,+CAKwB;AAExB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2CG;AACH,cAAqB,OAAoB;IACvC,kBAAW,CAAC,mBAAU,EAAE,OAAO,EAAE;QAC/B,IAAI,kCAAmB,EAAE;QACzB,IAAI,mCAAoB,EAAE;QAC1B,IAAI,sBAAO,EAAE;QACb,IAAI,mBAAI,EAAE;KACX,CAAC,CAAC;AACL,CAAC;AAPD,oBAOC;AAED,8CAA8C;AAC9C;IACE,OAAO,uBAAoB,EAAgB,CAAC;AAC9C,CAAC;AAFD,4CAEC","sourcesContent":["import { initAndBind } from '@sentry/core';\nimport { getCurrentClient as shimGetCurrentClient } from '@sentry/shim';\nimport { NodeOptions } from './backend';\nimport { NodeClient } from './client';\nimport {\n  Console,\n  Http,\n  OnUncaughtException,\n  OnUnhandledRejection,\n} from './integrations';\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n *\n *\n * @example\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTags({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n *\n * @example\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n *\n * @example\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n *\n * @see NodeOptions for documentation on configuration options.\n */\nexport function init(options: NodeOptions): void {\n  initAndBind(NodeClient, options, [\n    new OnUncaughtException(),\n    new OnUnhandledRejection(),\n    new Console(),\n    new Http(),\n  ]);\n}\n\n/** Returns the current NodeClient, if any. */\nexport function getCurrentClient(): NodeClient {\n  return shimGetCurrentClient() as NodeClient;\n}\n"]}