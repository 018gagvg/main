{"version":3,"file":"backend.js","sourceRoot":"","sources":["../src/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { Backend, DSN, Options, SentryError } from '@sentry/core';\nimport { addBreadcrumb, captureEvent } from '@sentry/shim';\nimport { SentryEvent } from '@sentry/types';\nimport {\n  HTTPSTransport,\n  HTTPTransport,\n  Raven,\n  SendMethod,\n  Transport,\n} from './raven';\n\n/** Original Raven send function. */\nconst sendRavenEvent = Raven.send.bind(Raven) as SendMethod;\n\n/** Extension to the Function type. */\ninterface FunctionExt extends Function {\n  __SENTRY_CAPTURE__?: boolean;\n}\n\n/**\n * Configuration options for the Sentry Node SDK.\n * @see NodeClient for more information.\n */\nexport interface NodeOptions extends Options {\n  /**\n   * Whether unhandled Promise rejections should be captured or not. If true,\n   * this will install an error handler and prevent the process from crashing.\n   * Defaults to false.\n   */\n  captureUnhandledRejections?: boolean;\n\n  /**\n   * Enables/disables automatic collection of breadcrumbs. Possible values are:\n   *\n   *  - `false`: all automatic breadcrumb collection disabled (default)\n   *  - `true`: all automatic breadcrumb collection enabled\n   *  - A dictionary of individual breadcrumb types that can be\n   *    enabled/disabled: e.g.: `{ console: true, http: false }`\n   */\n  autoBreadcrumbs?: { [key: string]: boolean } | boolean;\n\n  /** Callback that is executed when a fatal global error occurs. */\n  onFatalError?(error: Error): void;\n}\n\n/** The Sentry Node SDK Backend. */\nexport class NodeBackend implements Backend {\n  /** Creates a new Node backend instance. */\n  public constructor(private readonly options: NodeOptions = {}) {}\n\n  /**\n   * @inheritDoc\n   */\n  public install(): boolean {\n    // We are only called by the client if the SDK is enabled and a valid DSN\n    // has been configured. If no DSN is present, this indicates a programming\n    // error.\n    const dsn = this.options.dsn;\n    if (!dsn) {\n      throw new SentryError(\n        'Invariant exception: install() must not be called when disabled',\n      );\n    }\n\n    Raven.config(dsn, this.options);\n\n    // We need to leave it here for now, as we are skipping `install` call,\n    // due to integrations migration\n    // TODO: Remove it once we fully migrate our code\n    const { onFatalError } = this.options;\n    if (onFatalError) {\n      Raven.onFatalError = onFatalError;\n    }\n    Raven.installed = true;\n\n    // Hook into Raven's breadcrumb mechanism. This allows us to intercept both\n    // breadcrumbs created internally by Raven and pass them to the Client\n    // first, before actually capturing them.\n    Raven.captureBreadcrumb = breadcrumb => {\n      addBreadcrumb(breadcrumb);\n    };\n\n    // Hook into Raven's internal event sending mechanism. This allows us to\n    // pass events to the client, before they will be sent back here for\n    // actual submission.\n    Raven.send = (event, callback) => {\n      if (callback && (callback as FunctionExt).__SENTRY_CAPTURE__) {\n        callback(event);\n      } else {\n        captureEvent(event, callback);\n      }\n    };\n\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromException(exception: any): Promise<SentryEvent> {\n    return new Promise<SentryEvent>(resolve => {\n      (resolve as FunctionExt).__SENTRY_CAPTURE__ = true;\n      Raven.captureException(exception, resolve);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async eventFromMessage(message: string): Promise<SentryEvent> {\n    return new Promise<SentryEvent>(resolve => {\n      (resolve as FunctionExt).__SENTRY_CAPTURE__ = true;\n      Raven.captureMessage(message, resolve);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public async sendEvent(event: SentryEvent): Promise<number> {\n    return new Promise<number>(resolve => {\n      sendRavenEvent(event, error => {\n        // TODO: Check the response status code\n        resolve(error ? 500 : 200);\n      });\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeBreadcrumb(): boolean {\n    return true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public storeScope(): void {\n    // Noop\n  }\n\n  /**\n   * Set the transport module used for submitting events.\n   *\n   * This can be set to modules like \"http\" or \"https\" or any other object that\n   * provides a `request` method with options.\n   *\n   * @param transport The transport to use for submitting events.\n   */\n  public setTransport(transport: Transport): void {\n    const dsn = this.options.dsn;\n    if (!dsn) {\n      return;\n    }\n    const dsnObject = new DSN(dsn);\n\n    Raven.transport =\n      dsnObject.protocol === 'http'\n        ? new HTTPTransport({ transport })\n        : new HTTPSTransport({ transport });\n  }\n}\n"]}