{"version":3,"file":"scope.js","sourceRoot":"","sources":["../src/scope.ts"],"names":[],"mappings":"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","sourcesContent":["import { Scope as BaseScope } from '@sentry/shim';\nimport { Breadcrumb, SentryEvent, User } from '@sentry/types';\n\n/** An object to call setter functions on to enhance the event */\nexport class Scope implements BaseScope {\n  /**\n   * Flag if notifiying is happening.\n   */\n  private notifying: boolean;\n\n  /**\n   * Callback for client to receive scope changes.\n   */\n  private scopeChanged: (scope: Scope) => void = () => {\n    // noop\n  };\n\n  /** Array of breadcrumbs. */\n  private breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  private user: User = {};\n\n  /** Tags */\n  private tags: { [key: string]: string } = {};\n\n  /** Extra */\n  private extra: { [key: string]: any } = {};\n\n  /** Fingerprint */\n  private fingerprint?: string[];\n\n  /**\n   * Create a new empty internal scope. This will not be exposed to the user.\n   */\n  public constructor() {\n    this.notifying = false;\n  }\n\n  /**\n   * Set internal on change listener.\n   */\n  public setOnChange(callback: (scope: Scope) => void): void {\n    this.scopeChanged = callback;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  private notifyListeners(): void {\n    if (!this.notifying) {\n      this.notifying = true;\n      setTimeout(() => {\n        this.scopeChanged(this);\n        this.notifying = false;\n      }, 0);\n    }\n  }\n\n  /**\n   * Updates user context information for future events.\n   * @param user User context object to merge into current context.\n   */\n  public setUser(user: User): void {\n    this.user = user;\n    this.notifyListeners();\n  }\n\n  /**\n   * Updates tags context information for future events.\n   * @param tags Tags context object to merge into current context.\n   */\n  public setTag(key: string, value: string): void {\n    this.tags = { ...this.tags, [key]: value };\n    this.notifyListeners();\n  }\n\n  /**\n   * Updates extra context information for future events.\n   * @param extra Extra context object to merge into current context.\n   */\n  public setExtra(key: string, extra: any): void {\n    this.extra = { ...this.extra, [key]: extra };\n    this.notifyListeners();\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param fingerprint\n   */\n  public setFingerprint(fingerprint: string[]): void {\n    this.fingerprint = fingerprint;\n    this.notifyListeners();\n  }\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope\n   */\n  public setParentScope(scope?: Scope): void {\n    Object.assign(this, scope);\n  }\n\n  /** Returns breadcrumbs. */\n  public getBreadcrumbs(): Breadcrumb[] {\n    return this.breadcrumbs;\n  }\n\n  /** Returns tags. */\n  public getTags(): { [key: string]: string } {\n    return this.tags;\n  }\n\n  /** Returns extra. */\n  public getExtra(): { [key: string]: any } {\n    return this.extra;\n  }\n\n  /** Returns extra. */\n  public getUser(): User {\n    return this.user;\n  }\n\n  /** Returns fingerprint. */\n  public getFingerprint(): string[] | undefined {\n    return this.fingerprint;\n  }\n\n  /**\n   * Sets the breadcrumbs in the scope\n   * @param breadcrumbs\n   * @param maxBreadcrumbs\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): void {\n    this.breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this.breadcrumbs, breadcrumb].slice(-maxBreadcrumbs)\n        : [...this.breadcrumbs, breadcrumb];\n    this.notifyListeners();\n  }\n\n  /** Clears the current scope and resets its properties. */\n  public clear(): void {\n    this.breadcrumbs = [];\n    this.tags = {};\n    this.extra = {};\n    this.user = {};\n    this.fingerprint = undefined;\n    this.notifyListeners();\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * @param event\n   * @param maxBreadcrumbs\n   */\n  public applyToEvent(event: SentryEvent, maxBreadcrumbs?: number): void {\n    if (this.extra && Object.keys(this.extra).length) {\n      event.extra = { ...this.extra, ...event.extra };\n    }\n    if (this.tags && Object.keys(this.tags).length) {\n      event.tags = { ...this.tags, ...event.tags };\n    }\n    if (this.user && Object.keys(this.user).length) {\n      event.user = { ...this.user, ...event.user };\n    }\n    if (this.fingerprint && event.fingerprint === undefined) {\n      event.fingerprint = this.fingerprint;\n    }\n    // We only want to set breadcrumbs in the event if there are none\n    const hasNoBreadcrumbs =\n      !event.breadcrumbs ||\n      event.breadcrumbs.length === 0 ||\n      (event.breadcrumbs.values && event.breadcrumbs.values.length === 0);\n    if (hasNoBreadcrumbs && this.breadcrumbs.length > 0) {\n      event.breadcrumbs =\n        maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n          ? this.breadcrumbs.slice(-maxBreadcrumbs)\n          : this.breadcrumbs;\n    }\n  }\n}\n"]}