{"version":3,"file":"object.js","sourceRoot":"","sources":["../src/object.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;GASG;AACH,mBAA6B,MAAS;IACpC,oCAAoC;IACpC,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAChC,CAAC;AAHD,8BAGC;AAED;;;;;;GAMG;AACH,qBAA+B,GAAW;IACxC,8CAA8C;IAC9C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAM,CAAC;AAC9B,CAAC;AAHD,kCAGC;AAED;;;;;;;;;;GAUG;AACH,eAAyB,MAAS;IAChC,OAAO,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;AACxC,CAAC;AAFD,sBAEC;AAED;;;;;;;;;GASG;AAEH,cACE,MAA8B,EAC9B,IAAY,EACZ,WAAoC,EACpC,KAAoD;IAEpD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,+BAA+B;IAC/B,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,+BAA+B;IAC/B,MAAM,CAAC,IAAI,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,IAAI,KAAK,EAAE;QACT,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;KAClC;AACH,CAAC;AAfD,oBAeC","sourcesContent":["/**\n * Serializes the given object into a string.\n *\n * The object must be serializable, i.e.:\n *  - Only primitive types are allowed (object, array, number, string, boolean)\n *  - Its depth should be considerably low for performance reasons\n *\n * @param object A JSON-serializable object.\n * @returns A string containing the serialized object.\n */\nexport function serialize<T>(object: T): string {\n  // TODO: Fix cyclic and deep objects\n  return JSON.stringify(object);\n}\n\n/**\n * Deserializes an object from a string previously serialized with\n * {@link serialize}.\n *\n * @param str A serialized object.\n * @returns The deserialized object.\n */\nexport function deserialize<T>(str: string): T {\n  // TODO: Handle recursion stubs from serialize\n  return JSON.parse(str) as T;\n}\n\n/**\n * Creates a deep copy of the given object.\n *\n * The object must be serializable, i.e.:\n *  - It must not contain any cycles\n *  - Only primitive types are allowed (object, array, number, string, boolean)\n *  - Its depth should be considerably low for performance reasons\n *\n * @param object A JSON-serializable object.\n * @returns The object clone.\n */\nexport function clone<T>(object: T): T {\n  return deserialize(serialize(object));\n}\n\n/**\n * Wrap a given object method with a higher-order function\n * and keep track of the original within `track` array\n *\n * @param source An object that contains a method to be wrapped.\n * @param name A name of method to be wrapped.\n * @param replacement A function that should be used to wrap a given method.\n * @param [track] An array containing original methods that were wrapped.\n * @returns void\n */\n\nexport function fill(\n  source: { [key: string]: any },\n  name: string,\n  replacement: (...args: any[]) => any,\n  track?: Array<[{ [key: string]: any }, string, any]>,\n): void {\n  const orig = source[name];\n  source[name] = replacement(orig);\n  // tslint:disable:no-unsafe-any\n  source[name].__raven__ = true;\n  // tslint:disable:no-unsafe-any\n  source[name].__orig__ = orig;\n  if (track) {\n    track.push([source, name, orig]);\n  }\n}\n"]}