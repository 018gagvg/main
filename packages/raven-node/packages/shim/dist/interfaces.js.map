{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { User } from '@sentry/types';\n\n/** The type of a process stack layer. */\nexport type LayerType = 'process' | 'domain' | 'local';\n\n/** A layer in the process stack. */\nexport interface Layer {\n  client?: any;\n  scope?: Scope;\n  type: LayerType;\n}\n\n/** An object that contains a shim and maintains a scope stack. */\nexport interface Registry {\n  stack: Layer[];\n  shim?: any;\n}\n\n/** An object to call setter functions on to enhance the event */\nexport interface Scope {\n  /**\n   * Updates user context information for future events.\n   * @param user User context object to merge into current context.\n   */\n  setUser(user: User): void;\n\n  /**\n   * Adds a tag to the current scope, will be added to the event before sending.\n   * @param key\n   * @param value\n   */\n  setTag(key: string, value: string): void;\n\n  /**\n   * Adds a extra context to the current scope, will be added to the event\n   * before sending.\n   * @param key\n   * @param extra object to set\n   */\n  setExtra(key: string, extra: any): void;\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param fingerprint\n   */\n  setFingerprint(fingerprint: string[]): void;\n\n  /** Clears the current scope and resets its properties. */\n  clear(): void;\n}\n"]}