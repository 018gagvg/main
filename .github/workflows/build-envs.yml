name: 'Build & Test Environments'
on:
  push:
    branches:
      - develop
      - master
      - release/**
  pull_request:
  workflow_dispatch:
    inputs:
      commit:
        description: If the commit you want to test isn't the head of a branch, provide its SHA here
        required: false
  schedule:
    # Run every day at midnight (without cache)
    - cron: '0 0 * * *'

# Cancel in progress workflows on pull_requests.
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  HEAD_COMMIT: ${{ github.event.inputs.commit || github.sha }}

  CACHED_DEPENDENCY_PATHS: |
    ${{ github.workspace }}/node_modules
    ${{ github.workspace }}/packages/*/node_modules
    ${{ github.workspace }}/dev-packages/*/node_modules
    ~/.cache/ms-playwright/
    ~/.cache/mongodb-binaries/

  # DEPENDENCY_CACHE_KEY: can't be set here because we don't have access to yarn.lock

  # packages/utils/cjs and packages/utils/esm: Symlinks to the folders inside of `build`, needed for tests
  CACHED_BUILD_PATHS: |
    ${{ github.workspace }}/packages/*/build
    ${{ github.workspace }}/packages/ember/*.d.ts
    ${{ github.workspace }}/packages/gatsby/*.d.ts
    ${{ github.workspace }}/packages/core/src/version.ts
    ${{ github.workspace }}/packages/serverless
    ${{ github.workspace }}/packages/utils/cjs
    ${{ github.workspace }}/packages/utils/esm

  BUILD_CACHE_KEY: ${{ github.event.inputs.commit || github.sha }}
  BUILD_CACHE_TARBALL_KEY: tarball-${{ github.event.inputs.commit || github.sha }}

  # GH will use the first restore-key it finds that matches
  # So it will start by looking for one from the same branch, else take the newest one it can find elsewhere
  # We want to prefer the cache from the current develop branch, if we don't find any on the current branch
  NX_CACHE_RESTORE_KEYS: |
    nx-Linux-${{ github.ref }}-${{ github.event.inputs.commit || github.sha }}
    nx-Linux-${{ github.ref }}
    nx-Linux

jobs:
  job_get_metadata:
    name: Get Metadata
    runs-on: ubuntu-20.04
    permissions:
      pull-requests: read
    steps:
      - name: Check out current commit
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_COMMIT }}
          # We need to check out not only the fake merge commit between the PR and the base branch which GH creates, but
          # also its parents, so that we can pull the commit message from the head commit of the PR
          fetch-depth: 2
      - name: Get metadata
        id: get_metadata
        # We need to try a number of different options for finding the head commit, because each kind of trigger event
        # stores it in a different location
        run: |
          COMMIT_SHA=$(git rev-parse --short ${{ github.event.pull_request.head.sha || github.event.head_commit.id || env.HEAD_COMMIT }})
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git log -n 1 --pretty=format:%s $COMMIT_SHA)" >> $GITHUB_ENV

      - name: Determine changed packages
        uses: getsentry/paths-filter@v2.11.1
        id: changed
        with:
          filters: |
            shared: &shared
              - '*.{js,ts,json,yml,lock}'
              - 'CHANGELOG.md'
              - '.github/**'
              - 'jest/**'
              - 'scripts/**'
              - 'packages/core/**'
              - 'packages/rollup-utils/**'
              - 'packages/tracing/**'
              - 'packages/tracing-internal/**'
              - 'packages/utils/**'
              - 'packages/types/**'
              - 'packages/integrations/**'
            cloudflare:
              - *shared
              - *browser
              - 'dev-packages/env-tests/cloudflare-astro/**'
            any_code:
              - '!**/*.md'

      - name: Get PR labels
        id: pr-labels
        uses: mydea/pr-labels-action@update-core

    outputs:
      commit_label: '${{ env.COMMIT_SHA }}: ${{ env.COMMIT_MESSAGE }}'
      changed_cloudflare: ${{ steps.changed.outputs.cloudflare }}
      changed_any_code: ${{ steps.changed.outputs.any_code }}
      # Note: These next three have to be checked as strings ('true'/'false')!
      is_develop: ${{ github.ref == 'refs/heads/develop' }}
      is_release: ${{ startsWith(github.ref, 'refs/heads/release/') }}
      # When merging into master, or from master
      is_gitflow_sync: ${{ github.head_ref == 'master' || github.ref == 'refs/heads/master' }}
      has_gitflow_label:
        ${{ github.event_name == 'pull_request' && contains(steps.pr-labels.outputs.labels, ' Gitflow ') }}
      force_skip_cache:
        ${{ github.event_name == 'schedule' || (github.event_name == 'pull_request' &&
        contains(steps.pr-labels.outputs.labels, ' ci-skip-cache ')) }}

  job_install_deps:
    name: Install Dependencies
    needs: job_get_metadata
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: |
      (needs.job_get_metadata.outputs.is_gitflow_sync == 'false' && needs.job_get_metadata.outputs.has_gitflow_label == 'false') &&
      (needs.job_get_metadata.outputs.changed_any_code == 'true' || github.event_name != 'pull_request')
    steps:
      - name: 'Check out current commit (${{ needs.job_get_metadata.outputs.commit_label }})'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_COMMIT }}
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
        # we use a hash of yarn.lock as our cache key, because if it hasn't changed, our dependencies haven't changed,
        # so no need to reinstall them
      - name: Compute dependency cache key
        id: compute_lockfile_hash
        run: echo "hash=${{ hashFiles('yarn.lock', '**/package.json') }}" >> "$GITHUB_OUTPUT"

      - name: Check dependency cache
        uses: actions/cache@v3
        id: cache_dependencies
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ steps.compute_lockfile_hash.outputs.hash }}

      - name: Install dependencies
        if: steps.cache_dependencies.outputs.cache-hit != 'true'
        run: yarn install --ignore-engines --frozen-lockfile
    outputs:
      dependency_cache_key: ${{ steps.compute_lockfile_hash.outputs.hash }}

  cloudflare:
    name: Build
    needs: [job_get_metadata, job_install_deps]
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - name: Check out current commit (${{ needs.job_get_metadata.outputs.commit_label }})
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_COMMIT }}
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
      - name: Check dependency cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_deps.outputs.dependency_cache_key }}
          fail-on-cache-miss: true

      - name: Check build cache
        uses: actions/cache@v3
        id: cache_built_packages
        with:
          path: ${{ env.CACHED_BUILD_PATHS }}
          key: ${{ env.BUILD_CACHE_KEY }}

      - name: NX cache
        uses: actions/cache@v3
        # Disable cache when:
        # - on release branches
        # - when PR has `ci-skip-cache` label or on nightly builds
        if: |
          needs.job_get_metadata.outputs.is_release == 'false' &&
          needs.job_get_metadata.outputs.force_skip_cache == 'false'
        with:
          path: .nxcache
          key: nx-Linux-${{ github.ref }}-${{ env.HEAD_COMMIT }}
          # On develop branch, we want to _store_ the cache (so it can be used by other branches), but never _restore_ from it
          restore-keys:
            ${{needs.job_get_metadata.outputs.is_develop == 'false' && env.NX_CACHE_RESTORE_KEYS || 'nx-never-restore'}}

      - name: Build package
        # Under normal circumstances, using the git SHA as a cache key, there shouldn't ever be a cache hit on the built
        # packages, and so `yarn build` should always run. This `if` check is therefore only there for testing CI issues
        # where the built packages are beside the point. In that case, you can change `BUILD_CACHE_KEY` (at the top of
        # this file) to a constant and skip rebuilding all of the packages each time CI runs.
        if: steps.cache_built_packages.outputs.cache-hit == ''
        working-directory: dev-packages/env-tests/cloudflare-astro
        run: yarn build

      - name: Publish to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        if: steps.cache_built_packages.outputs.cache-hit == ''
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
          directory: YOUR_BUILD_OUTPUT_DIRECTORY
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          workingDirectory: dev-packages/env-tests/cloudflare-astro

    outputs:
      # this needs to be passed on, because the `needs` context only looks at direct ancestors (so steps which depend on
      # `job_build` can't see `job_install_deps` and what it returned)
      dependency_cache_key: ${{ needs.job_install_deps.outputs.dependency_cache_key }}

  job_artifacts:
    name: Upload Artifacts
    needs: [job_get_metadata, job_build]
    runs-on: ubuntu-20.04
    # Build artifacts are only needed for releasing workflow.
    if: needs.job_get_metadata.outputs.is_release == 'true'
    steps:
      - name: Check out current commit (${{ needs.job_get_metadata.outputs.commit_label }})
        uses: actions/checkout@v4
        with:
          ref: ${{ env.HEAD_COMMIT }}
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: 'package.json'
      - name: Restore caches
        uses: ./.github/actions/restore-cache
        env:
          DEPENDENCY_CACHE_KEY: ${{ needs.job_build.outputs.dependency_cache_key }}
      - name: Pack
        run: yarn build:tarball
      - name: Archive artifacts
        uses: actions/upload-artifact@v4.0.0
        with:
          name: ${{ github.sha }}
          path: |
            ${{ github.workspace }}/packages/browser/build/bundles/**
            ${{ github.workspace }}/packages/integrations/build/bundles/**
            ${{ github.workspace }}/packages/replay/build/bundles/**
            ${{ github.workspace }}/packages/**/*.tgz
            ${{ github.workspace }}/packages/serverless/build/aws/dist-serverless/*.zip
